".text.html.twig":
  "{% ... %}":
    prefix: "%%"
    body: "{% $1 %}$2"
  "{# ... #}":
    prefix: "##"
    body: "{# $1 #}$2"
  "{{ ... }}":
    prefix: "}}"
    body: "{{ $1 }}$2"
  extends:
    prefix: "extends"
    body: "{% extends '${1:template}' %}$0"
  import:
    prefix: "import"
    body: '''
      {% import '${1:template}' as ${2:key} %}
    '''
  include:
    prefix: "inc"
    body: "{% include '${1:template}' %}$0"
  "include w/ params":
    prefix: "incp"
    body: '''
      {% include '${1:template}' with {
          ${2:key}: ${3:'${4:value}'}
      } %}
      $0
    '''
  set:
    prefix: "set"
    body: "{% set ${1:var} = ${2:value} %}$0"
  "set (block)":
    prefix: "setb"
    body: '''
      {% set ${1:var} %}
          $0
      {% endset %}
    '''
  block:
    prefix: "block"
    body: '''
      {% block ${1:name} %}
          $0
      {% endblock %}
    '''
  filter:
    prefix: "filter"
    body: '''
      {% filter ${1:name} %}
          $0
      {% endfilter %}
    '''
  if:
    prefix: "if"
    body: "{% if ${1:condition} %}$0{% endif %}"
  "if (block)":
    prefix: "ifb"
    body: '''
      {% if ${1:condition} %}
          $0
      {% endif %}
    '''
  "if ... else":
    prefix: "ife"
    body: '''
      {% if ${1:condition} %}
          $2
      {% else %}
          $0
      {% endif %}
    '''
  "if ... elseif":
    prefix: "ifeif"
    body: '''
      {% if ${1:condition} %}
          $2
      {% elseif ${3:condition} %}
          $0
      {% endif %}
    '''
  "if ... elseif ... else":
    prefix: "ifeife"
    body: '''
      {% if ${1:condition} %}
          $2
      {% elseif ${3:condition} %}
          $4
      {% else %}
          $0
      {% endif %}
    '''
  else:
    prefix: "else"
    body: "{% else %}$0"
  elseif:
    prefix: "elseif"
    body: "{% elseif ${1:condition} %}$0"
  for:
    prefix: "for"
    body: '''
      {% for ${1:item} in ${2:items} %}
          $0
      {% endfor %}
    '''
  "for ... else":
    prefix: "fore"
    body: '''
      {% for ${1:item} in ${2:items} %}
          $3
      {% else %}
          $0
      {% endfor %}
    '''
  endif:
    prefix: "endif"
    body: "{% endif %}$0"
  endfor:
    prefix: "endfor"
    body: "{% endfor %}$0"
  endset:
    prefix: "endset"
    body: "{% endset %}$0"
  endblock:
    prefix: "endblock"
    body: "{% endblock %}$0"
  endfilter:
    prefix: "endfilter"
    body: "{% endfilter %}$0"
  endmacro:
    prefix: "endmacro"
    body: "{% endmacro %}$0"
  "craft.assets":
    prefix: "assets"
    body: '''
      {% set assets = craft.assets({
          sourceId: '${1:1}',
          kind: '${2:image}',
          limit: ${3:10}
      }).all() %}

      {% for image in assets %}
          <img src="{{ image.url${4:('${5:thumb}')} }}" width="${6:200}" height="${7:200}" alt="{{ image.title }}">
      {% endfor %}
      $0
    '''
  "craft.categories":
    prefix: "categories"
    body: '''
      {% set categories = craft.categories({
          group: '${1:categoryGroupHandle',
          limit: '${2:10}'
      }).all() %}

      <ul>
          {% nav category in categories %}
              <li>
                  <a href="{{ category.url }}">{{ category.title }}</a>
                  {% ifchildren %}
                      <ul>
                          {% children %}
                      </ul>
                  {% endifchildren %}
              </li>
          {% endnav %}
      </ul>
    '''
  "craft.entries":
    prefix: "entries"
    body: '''
      {% set entries = craft.entries({
          section:    '${1:sectionName}',
          limit:      '${2:10}'
      }).all() %}

      {% for entry in entries %}
          <a href="{{ entry.url }}">{{ entry.title }}</a>
      {% endfor %}
      $0
    '''
  feed:
    prefix: "feed"
    body: '''
      {% set feedUrl = "${1:http://feeds.feedburner.com/blogandtonic}" %}
      {% set limit = ${2:10} %}
      {% set items = craft.feeds.getFeedItems(feedUrl, limit) %}

      {% for item in items %}
          <article>
              <h3><a href="{{ item.permalink }}">{{ item.title }}</a></h3>
              <p class="author">{{ item.authors[0].name }}</p>
              <p class="date">{{ item.date }}</p>

              {{ item.summary }}
          </article>
      {% endfor %}
    '''
  "craft.tags":
    prefix: "tags"
    body: '''
      {% set tags = craft.tags({
          set:    '${1:setName}'
      }).all() %}

      <ul>
          {% for tag in tags %}
              <li>{{ tag }}</a></li>
          {% endfor %}
      </ul>
      $0
    '''
  "craft.users":
    prefix: "users"
    body: '''
      {% set accounts = craft.users({
          group:    '${1:groupName}'
      }).all() %}

      {% for account in accounts %}
          {{ account.firstName }} {{ account.lastName }}
      {% endfor %}
      $0
    '''
  cache:
    prefix: "cache"
    body: '''
    {% cache %}
        $0
    {% endcache %}
    '''
  "cache globally":
    prefix: "cacheg"
    body: '''
    {% cache globally %}
        $0
    {% endcache %}
    '''
  "cache with key":
    prefix: "cachek"
    body: '''
    {% cache using key ${1:"cache-key"} %}
        $0
    {% endcache %}
    '''
  "cache globally with key":
    prefix: "cachegk"
    body: '''
    {% cache globally using key ${1:"cache-key"} %}
        $0
    {% endcache %}
    '''
  "cache until":
    prefix: "cacheuntil"
    body: '''
    {% cache until ${1:condition} %}
        $0
    {% endcache %}
    '''
  "cache unless":
    prefix: "cacheunless"
    body: '''
    {% cache unless ${1:condition} %}
        $0
    {% endcache %}
    '''
  csrf:
    prefix: "csrf"
    body: '''
      {{ csrfInput() }}
      $0
    '''
  exit:
    prefix: "exit"
    body: "{% exit ${1:404} %}"
  "dump and die":
    prefix: "dd"
    body: "{% dd $1 %}$0"
  includeCss:
    prefix: "includecss"
    body: '''
      {% css %}
          ${1:/* ${2:CSS here} */}
          $3
      {% endcss %}
      $0
    '''
  registerCssFile:
    prefix: "registerCssFile"
    body: '''
      {% do view.registerCssFile(${1:/resources/css/global.css}) %}
      $0
    '''
  includeJs:
    prefix: "includejs"
    body: '''
      {% js %}
          ${1:/* ${2:CSS here} */}
          $3
      {% endjs %}
      $0
    '''
  registerJsFile:
    prefix: "registerJsFile"
    body: '''
      {% do view.registerJsFile(${1:/resources/js/global.js}) %}
      $0
    '''
  macro:
    prefix: "macro"
    body: '''
      {% macro ${1:name}(${2:param}) %}
          $0
      {% endmacro %}
    '''
  matrix:
    prefix: "matrix"
    body: '''
      {% for block in ${1:entry.matrixFieldHandle} %}
          {% if block.type == '${2:blockHandle}' %}
              {{ block.${3:fieldHandle} }}
          {% endif %}

          {% if block.type == '${4:blockHandle}' %}
              {{ block.${5:fieldHandle} }}
          {% endif %}
      {% endfor %}
      $0
    '''
  "paginate simple":
    prefix: "paginatesimple"
    body: '''
      {% paginate craft.entries.section('blog').limit(10) as entries %}
          {% for entry in entries %}
              <article>
                  <h1>{{ entry.title }}</h1>
                  {{ entry.body }}
              </article>
          {% endfor %}

          {% if paginate.prevUrl %}
              <a href="{{ paginate.prevUrl }}">Previous Page</a>
          {% endif %}

          {% if paginate.nextUrl %}
              <a href="{{ paginate.nextUrl }}">Next Page</a>
          {% endif %}
      {% endpaginate %}
      $0
    '''
  "paginate advanced":
    prefix: "paginateadvanced"
    body: '''
      {# PAGINATION

      For this pagination to work properly, we need to be sure to set
      the paginateBase variable in the template we are including the
      pagination in.

      {% set paginateBase = "/blog/p" %}
      #}

      {% if paginate.totalPages > 1 %}
      <ul>
          {% if paginate.currentPage != "1"  %}
              <li><a href="{{ paginateBase ~ '1' }}">First Page</a></li>
          {% endif %}

          {% if paginate.prevUrl %}
              <li><a href="{{ paginate.prevUrl }}">Previous Page</a></li>
          {% endif %}

          {% for pageNumber in 1..paginate.totalPages %}
              <li {% if paginate.currentPage == pageNumber %}class="active-page"{% endif %}>
                  <a href="{{ paginateBase ~ pageNumber }}">{{ pageNumber }}</a>
              </li>
          {% endfor %}

          {% if paginate.nextUrl %}
              <li><a href="{{ paginate.nextUrl }}">Next Page</a></li>
          {% endif %}

          {% if paginate.currentPage != paginate.total %}
              <li><a href="{{ paginateBase ~ paginate.total }}">Last Page</a></li>
          {% endif %}
      </ul>
      {% endif %}
      $0
    '''
  redirect:
    prefix: "redirect"
    body: '''
      {% redirect '${1:template/path or https://craftcms.com/}' %}
      $0
    '''
  "request getParam":
    prefix: "getparam"
    body: '''
      craft.app.request.getParam(${1:'Query String or Post Variable Name'})
      $0
    '''
  "request getPost":
    prefix: "getpost"
    body: '''
      craft.app.request.getPost(${1:'postVariableName'})
      $0
    '''
  "request getQuery":
    prefix: "getquery"
    body: '''
      craft.app.request.getQuery(${1:'queryStringName'})
      $0
    '''
  "request getSegment":
    prefix: "getsegment"
    body: '''
      craft.app.request.getSegment(${1:2})
      $0
    '''
  requireLogin:
    prefix: "requirelogin"
    body: '''
        {% requireLogin %}
        $0
    '''
  requirePermission:
    prefix: "requirepermission"
    body: '''
      {% requirePermission "${1:spendTheNight}" %}
      $0
    '''
  switch:
    prefix: "switch"
    body: '''
      {% switch ${1:variable} %}

        {% case "${2:value1}" %}


        {% case "${3:value2}" %}


        {% default %}


      {% endswitch %}
      $0
    '''
  shuffle:
    prefix: "shuffle"
    body: "shuffle($1)$0"
  url:
    prefix: "url"
    body: "url('${1:path}')$0"
  "url w/ arguments":
    prefix: "urla"
    body: "url('${1:path}', ${2:{foo:'1', bar:'2'\\}}, ${3:'http'}, ${4:false})$0"
  ciel:
    prefix: "ciel"
    body: "ceil($1)$0"
  floor:
    prefix: "floor"
    body: "floor($1)$0"
  max:
    prefix: "max"
    body: "max(${1:$2, $3})$0"
  min:
    prefix: "min"
    body: "min(${1:$2, $3})$0"
  round:
    prefix: "round"
    body: "54|round$0"
  "info: site":
    prefix: "info"
    body: '''
      SITE
      {{ siteName }}
      {{ siteUrl }}
      {{ loginUrl }}
      {{ logoutUrl }}

      DATE
      {{ now|date('Y') }}
      {{ now|date('M') }}
      {{ now|date('d') }}
      {{ now|date("d M Y") }}
      {{ now|date_modify("+1 day") }}

      USERS
      {{ currentUser }}  {# null if no user is logged in #}
      {{ currentUser.id }}
      {{ currentUser.username }}
      {{ currentUser.firstName }}
      {{ currentUser.lastName }}
      {{ currentUser.friendlyName }}
      {{ currentUser.email }}
      {{ currentUser.preferredLocale }}
      {{ currentUser.admin }}
      {{ currentUser.status }}  {# active, locked, suspended, pending, archived #}
      {{ currentUser.lastLoginDate }}
      {{ currentUser.dateCreated }}
      {{ currentUser.dateUpdated }}

      {{ currentUser.getChildren() }}
      {{ currentUser.getParents() }}

      {% set params = { group: 'authors', orderBy: 'firstName, lastName' } %}
      {{ currentUser.getNext( params ) }}
      {{ currentUser.getPrev( params ) }}

      GLOBALS
      {{ globalSetName.fieldName }}

      TAGS
      {{ craft.assets }}
      {{ craft.categories }}
      {{ craft.entries }}
      {{ craft.tags }}
      {{ craft.user }}

      {{ craft.app.config }}
      {{ craft.app.feeds }}
      {{ craft.app.fields }}
      {{ craft.app.globals }}
      {{ craft.app.request }}
      {{ craft.app.sections }}
      {{ craft.app.user }}

      $0
    '''
  "info: craft.app.request":
    prefix: "infoapp"
    body: '''
      {# Properties #}
      {{ craft.app.request.isAjax }}
      {{ craft.app.request.isLivePreview }}
      {{ craft.app.request.isSecure }}

      {{ craft.app.request.path }}
      {{ craft.app.request.url }}
      {{ craft.app.request.urlReferrer }}
      {{ craft.app.request.pageNum }}

      {{ craft.app.request.queryString }}
      {{ craft.app.request.queryStringWithoutPath }}
      {{ craft.app.request.segments }}   {# array #}

      {{ craft.app.request.firstSegment }}
      {{ craft.app.request.lastSegment }}

      {{ craft.app.request.serverName }}

      {# Methods #}
      {{ craft.app.request.isMobileBrowser() }}

      {{ craft.app.request.getSegment( n ) }}
      {{ craft.app.request.getCookie( name ) }}
      {{ craft.app.request.getParam( name ) }}  {# Returns a parameter from either the query string or POST data. #}
      {{ craft.app.request.getQuery( name ) }}  {# Returns a parameter from the query string. #}
      {{ craft.app.request.getPost( name ) }}   {# Returns a parameter from the POST data. #}

      $0
    '''
  "info: craft.assets":
    prefix: "infoassets"
    body: '''

      {% set assets = craft.assets.first() %}
      {% set assets = craft.assets.last() %}
      {% set assets = craft.assets.nth( n ) %}
      {% set assets = craft.assets.ids() %}
      {% set assets = craft.assets.count() %}

      {% set assets = craft.assets({
          filename:   'fileName.jpg',
          fixedOrder: true|false,
          folderId:   id,
          height:     200,
          id:         id,
          kind:       http://buildwithcraft.com/docs/templating/craft.assets#kind,
          offset:     1,
          size:       1000,
          title:      'title',
          source:     'assetSourceHandle'
          sourceId:   id,
          width:      200,

          relatedTo:      element, sourceElement, targetElement, field, sourceLocale,
          childOf:        See supported syntaxes below,
          childField:     'fieldHandle' OR id,
          parentOf:       See supported syntaxes below,
          parentField:    'fieldHandle' OR id,

          orderBy:    'title,id,sourceId,folderId,filename,kind,width,height,size,
                      dateCreated asc,dateUpdated desc',
                      Also supports any textual field handles
          limit:      100,
          locale:     'en_us',
          indexBy:    'id,title',

          search:     'salty dog'           containing both "salty" and "dog"
                      '"salty dog"'         containing the exact phrase "salty dog"
                      'salty OR dog'        containing either "salty" or "dog" (or both)
                      'salty -dog'          containing "salty" but not "dog"
                      'body:salty'          containing "salty" in the "body" field
                      'body:salty'          body:dog containing both "salty" and "dog"
                                            in the "body" field
                      'body:*'              containing anything within the "body" field
                      'salty locale:en_us'  containing "salty" in the locale "en_us"
                      'salt*'               containing a word that begins with "salt"
                      '*ty'                 containing a word that ends with "ty"
                      '*alt*'               containing a word that contains "alt",

          Supported syntaxes for childOf, kind, parentOf
                    elementId
                    AssetFileModel, EntryModel, UserModel, or TagModel
                    [ arrayOfModels, arrayOfModels, arrayOfModels ]
                    [ 1, 2, 3 ]
                    craft.assets, craft.entries, craft.users, craft.tags
      }).all() %}

      {% for asset in assets %}
          {{ asset.dateCreated }}
          {{ asset.dateUpdated }}
          {{ asset.extension }}
          {{ asset.filename }}
          {{ asset.folder }}
          {{ asset.folderId }}
          {{ asset.height }}
          {{ asset.id }}
          {{ asset.img }}
          {{ asset.kind }}
          {{ asset.locale }}
          {{ asset.link }}
          {{ asset.mimeType }}
          {{ asset.size | filesize }}
          {{ asset.source }}
          {{ asset.sourceId }}
          {{ asset.url }}
          {{ asset.width }}

          {{ asset.getHeight( transform ) }}
          {{ asset.getWidth( transform ) }}
          {{ asset.getUrl( transform ) }}
          {{ asset.setTransform( transform ) }}

          {% set prev = asset.getPrev( params ) %}
          {% set next = asset.getNext( params ) %}
          {% if prev %} <a href="/link-to-prev-asset">{{ prev.title }}</a> {% endif %}
          {% if next %} <a href="/link-to-next-asset">{{ next.title }}</a> {% endif %}

      {% endfor %}}
      $0
    '''
  "info: craft.categories":
    prefix: "infocategories"
    body: '''

      {% set categories = craft.categories.first() %}
      {% set categories = craft.categories.last() %}
      {% set categories = craft.categories.nth( n ) %}
      {% set categories = craft.categories.ids() %}
      {% set categories = craft.categories.count() %}

      {% set categories = craft.categories({
          id:             id OR 'not id' ,
          fixedOrder:     true/false,
          title:          'title',
          slug:           'slug',
          uri:            'uri',
          group:          'categoryGroupHandle'
          groupId:        id,
          status:         'live,pending,expired,disabled,null',
          offset:         10,
          level:          2,
          locale:         'en_us',

          relatedTo:      element, sourceElement, targetElement, field, sourceLocale,
          ancestorOf:     CategoryModel OR id,
          ancestorDist:   2,
          descendantOf:   CategoryModel OR id,
          descendantDist: 2,
          nextSiblingOf:  CategoryModel OR id,
          prevSiblingOf:  CategoryModel OR id,

          orderBy:        'title,id,groupId,slug,uri,
                          dateCreated asc,dateUpdated desc',
          limit:          10,
          indexBy:        'id,title',

          search:         'salty dog'           containing both "salty" and "dog"
                          '"salty dog"'         containing the exact phrase "salty dog"
                          'salty OR dog'        containing either "salty" or "dog" (or both)
                          'salty -dog'          containing "salty" but not "dog"
                          'body:salty'          containing "salty" in the "body" field
                          'body:salty'          body:dog containing both "salty" and "dog"
                                                in the "body" field
                          'body:*'              containing anything within the "body" field
                          'salty locale:en_us'  containing "salty" in the locale "en_us"
                          'salt*'               containing a word that begins with "salt"
                          '*ty'                 containing a word that ends with "ty"
                          '*alt*'               containing a word that contains "alt"

      }).all() %}

      {% for category in categories %}
          {{ category.id }}
          {{ category.level }}
          {{ category.groupId }}
          {{ category.group }}   {# array #}
          {{ category.locale }}
          {{ category.title }}
          {{ category.slug }}
          {{ category.uri }}
          {{ category.url }}       {# full front-end URL #}
          {{ category.link }}      {# full <a> tag #}
          {{ category.cpEditUrl }}

          {{ category.enabled }}
          {{ category.status }}

          {{ category.dateCreated }}
          {{ category.dateUpdated }}

          {{ category.getAncestors( distance ) }}
          {{ category.getDescendants( distance) }}
          {{ category.children }}
          {{ category.parent }}
          {{ category.hasDescendants }}
          {{ category.nextSibling }}
          {{ category.prevSibling }}
          {{ category.isAncestorOf( entry ) }}
          {{ category.isChildOf( entry ) }}
          {{ category.isDescendantOf( entry ) }}
          {{ category.isNextSiblingOf( entry ) }}
          {{ category.isParentOf( entry ) }}
          {{ category.isPrevSiblingOf( entry ) }}
          {{ category.isSiblingOf( entry ) }}

          {% set prev = category.getPrev( params ) %}
          {% set next = category.getNext( params ) %}
          {% if prev %} <a href="{{ prev.url }}">{{ prev.title }}</a> {% endif %}
          {% if next %} <a href="{{ next.url }}">{{ next.title }}</a> {% endif %}
      {% endfor %}}
      $0
    '''
  "info: craft.config":
    prefix: "infoconfig"
    body: '''
      {# Access any settings in craft/config/general.php #}
      {% if craft.app.config.general.devMode %}{% endif %}

      {# Access settings of any config #}
      {{ craft.app.config.general.someConfigSetting }}

      {# General Settings #}
      {{ craft.app.config.general.appId }}
      {{ craft.app.config.general.cacheDuration }}
      {{ craft.app.config.general.cacheMethod }}
      {{ craft.app.config.general.customAsciiCharMappings }} {# array #}
      {{ craft.app.config.general.defaultCookieDomain }}
      {{ craft.app.config.general.devMode }}
      {{ craft.app.config.general.environmentVariables }} {# array #}
      {{ craft.app.config.general.isSystemOn }}
      {{ craft.app.config.general.logDumpMethod }}
      {{ craft.app.config.general.overridePhpSessionLocation }}
      {{ craft.app.config.general.phpMaxMemoryLimit }}
      {{ craft.app.config.general.runTasksAutomatically }}
      {{ craft.app.config.general.searchIgnoreWords }} {# array #}
      {{ craft.app.config.general.siteName }} {# can be an array #}
      {{ craft.app.config.general.siteUrl }} {# can be an array #}
      {{ craft.app.config.general.timezone }}
      {{ craft.app.config.general.translationDebugOutput }}
      {{ craft.app.config.general.useCompressedJs }}
      {{ craft.app.config.general.useWriteFileLock }}
      {{ craft.app.config.general.useXSendFile }}

      {# Security Settings #}
      {{ craft.app.config.general.csrfTokenName }}
      {{ craft.app.config.general.defaultFilePermissions }}
      {{ craft.app.config.general.defaultFolderPermissions }}
      {{ craft.app.config.general.defaultTokenDuration }}
      {{ craft.app.config.general.enableCsrfProtection }}
      {{ craft.app.config.general.tokenParam }}
      {{ craft.app.config.general.useSecureCookies }}

      {# Updates Settings #}
      {{ craft.app.config.general.allowAutoUpdates }}
      {{ craft.app.config.general.backupDbOnUpdate }}
      {{ craft.app.config.general.restoreDbOnUpdateFailure }}

      {# URL Settings #}
      {{ craft.app.config.general.actionTrigger }}
      {{ craft.app.config.general.addTrailingSlashesToUrls }}
      {{ craft.app.config.general.allowUppercaseInSlug }}
      {{ craft.app.config.general.baseCpUrl }}
      {{ craft.app.config.general.cpTrigger }}
      {{ craft.app.config.general.limitAutoSlugsToAscii }}
      {{ craft.app.config.general.maxSlugIncrement }}
      {{ craft.app.config.general.omitScriptNameInUrls }}
      {{ craft.app.config.general.pageTrigger }}
      {{ craft.app.config.general.resourceTrigger }}
      {{ craft.app.config.general.slugWordSeparator }}
      {{ craft.app.config.general.usePathInfo }}

      {# Templating Settings #}
      {{ craft.app.config.general.cacheElementQueries }}
      {{ craft.app.config.general.defaultTemplateExtensions }} {# array #}
      {{ craft.app.config.general.errorTemplatePrefix }}
      {{ craft.app.config.general.indexTemplateFilenames }}
      {{ craft.app.config.general.privateTemplateTrigger }}

      {# Users Settings #}
      {{ craft.app.config.general.activateAccountFailurePath }}
      {{ craft.app.config.general.activateAccountSuccessPath }}
      {{ craft.app.config.general.autoLoginAfterAccountActivation }}
      {{ craft.app.config.general.blowfishHashCost }}
      {{ craft.app.config.general.cooldownDuration }}
      {{ craft.app.config.general.invalidLoginWindowDuration }}
      {{ craft.app.config.general.invalidUserTokenPath }}
      {{ craft.app.config.general.loginPath }}
      {{ craft.app.config.general.logoutPath }}
      {{ craft.app.config.general.maxInvalidLogins }}
      {{ craft.app.config.general.postCpLoginRedirect }}
      {{ craft.app.config.general.postLoginRedirect }}
      {{ craft.app.config.general.purgePendingUsersDuration }}
      {{ craft.app.config.general.rememberUsernameDuration }}
      {{ craft.app.config.general.rememberedUserSessionDuration }}
      {{ craft.app.config.general.requireMatchingUserAgentForSession }}
      {{ craft.app.config.general.requireUserAgentAndIpForSession }}
      {{ craft.app.config.general.setPasswordPath }}
      {{ craft.app.config.general.setPasswordSuccessPath }}
      {{ craft.app.config.general.testToEmailAddress }}
      {{ craft.app.config.general.useEmailAsUsername }}
      {{ craft.app.config.general.userSessionDuration }}
      {{ craft.app.config.general.verificationCodeDuration }}

      {# Assets Settings #}
      {{ craft.app.config.general.allowedFileExtensions }}
      {{ craft.app.config.general.defaultImageQuality }}
      {{ craft.app.config.general.extraAllowedFileExtensions }}
      {{ craft.app.config.general.filenameWordSeparator }}
      {{ craft.app.config.general.generateTransformsBeforePageLoad }}
      {{ craft.app.config.general.imageDriver }}
      {{ craft.app.config.general.maxCachedCloudImageSize }}
      {{ craft.app.config.general.maxUploadFileSize }}
      {{ craft.app.config.general.rotateImagesOnUploadByExifData }}
      {{ craft.app.config.general.generateTransformsBeforePageLoad }}

      $0
    '''
  "info: craft.entries":
    prefix: "infoentries"
    body: '''

      {% set entries = craft.entries.first() %}
      {% set entries = craft.entries.last() %}
      {% set entries = craft.entries.nth( n ) %}
      {% set entries = craft.entries.ids() %}
      {% set entries = craft.entries.count() %}

      {% set entries = craft.entries({
          id:             id OR 'not id' ,
          fixedOrder:     true/false,
          slug:           'slug',
          uri:            'uri',
          sectionId:      id,
          section:        'sectionHandle', [arrayOfSectionHandles], SectionModel
          authorId:       id,
          authorGroupId:  id,
          authorGroup:    id,
          postDate:       'YYYY,YYYY-MM,YYYY-MM-DD,YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM:SS',
          after:          'YYYY,YYYY-MM,YYYY-MM-DD,YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM:SS',
          before:         'Unix timestamp,DateTime variable',
          status:         'live,pending,expired,disabled,null',
          type:           'entryTypeHandle',
          archived:       true OR false,
          offset:         10,
          level:          2,
          locale:         'en_us',
          localeEnabled:  true/false,

          relatedTo:      element, sourceElement, targetElement, field, sourceLocale,
          ancestorOf:     EntryModel OR id,
          ancestorDist:   2,
          descendantOf:   EntryModel OR id,
          descendantDist: 2,
          nextSiblingOf:  EntryModel OR id,
          prevSiblingOf:  EntryModel OR id,

          orderBy:        'title,id,authorId,sectionId,slug,uri,postDate,expiryDate',
                          'dateCreated asc', 'dateUpdated desc'
          limit:          10,
          indexBy:        'id,title',

          search:         'salty dog'           containing both "salty" and "dog"
                          '"salty dog"'         containing the exact phrase "salty dog"
                          'salty OR dog'        containing either "salty" or "dog" (or both)
                          'salty -dog'          containing "salty" but not "dog"
                          'body:salty'          containing "salty" in the "body" field
                          'body:salty'          body:dog containing both "salty" and "dog"
                                                in the "body" field
                          'body:*'              containing anything within the "body" field
                          'salty locale:en_us'  containing "salty" in the locale "en_us"
                          'salt*'               containing a word that begins with "salt"
                          '*ty'                 containing a word that ends with "ty"
                          '*alt*'               containing a word that contains "alt"

          Supported syntaxes for childOf, kind, parentOf
                        elementId
                        AssetFileModel, EntryModel, UserModel, or TagModel
                        [ arrayOfModels, arrayOfModels, arrayOfModels ]
                        [ 1, 2, 3 ]
                        craft.assets, craft.entries, craft.users, craft.tags
      }).all() %}

      {% for entry in entries %}
          {{ entry.id }}
          {{ entry.level }}
          {{ entry.sectionId }}
          {{ entry.section }}   {# array #}
          {{ entry.authorId }}
          {{ entry.author }}    {# array #}
          {{ entry.locale }}
          {{ entry.type }}
          {{ entry.title }}
          {{ entry.slug }}
          {{ entry.uri }}
          {{ entry.url }}       {# full front-end URL #}
          {{ entry.link }}      {# full <a> tag #}
          {{ entry.cpEditUrl }}

          {{ entry.enabled }}
          {{ entry.status }}

          {{ entry.postDate }}
          {{ entry.expiryDate }}
          {{ entry.dateCreated }}
          {{ entry.dateUpdated }}

          {{ entry.getAncestors( distance ) }}
          {{ entry.getDescendants( distance) }}
          {{ entry.children }}
          {{ entry.parent }}
          {{ entry.hasDescendants }}
          {{ entry.nextSibling }}
          {{ entry.prevSibling }}
          {{ entry.isAncestorOf( entry ) }}
          {{ entry.isChildOf( entry ) }}
          {{ entry.isDescendantOf( entry ) }}
          {{ entry.isNextSiblingOf( entry ) }}
          {{ entry.isParentOf( entry ) }}
          {{ entry.isPrevSiblingOf( entry ) }}
          {{ entry.isSiblingOf( entry ) }}

          {% set prev = entry.getPrev( params ) %}
          {% set next = entry.getNext( params ) %}
          {% if prev %} <a href="{{ prev.url }}">{{ prev.title }}</a> {% endif %}
          {% if next %} <a href="{{ next.url }}">{{ next.title }}</a> {% endif %}
      {% endfor %}}
      $0
    '''
  "info: craft.feeds":
    prefix: "infofeeds"
    body: '''
      {# Required #}
      {% set feedUrl  = "http://feeds.feedburner.com/blogandtonic" %}

      {# Option #}
      {% set limit = 10 %} {# How many items to return. Default: All #}
      {% set skip = 0 %}  {# How many items to skip. Default: Zero #}

      {% set items = craft.feeds.getFeedItems( url, limit, offset, cacheDuration ) %}

      {% for item in items %}
          {{ title }}
          {{ summary }}
          {{ content }}

          {{ date }}
          {{ dateUpdated }}
          {{ permalink }}

          {{ authors }}               {# array #}
          {{ authors[0].name }}
          {{ authors[0].url }}
          {{ authors[0].email }}

          {{ contributors }}          {# array #}
          {{ contributors[0].name }}
          {{ contributors[0].url }}
          {{ contributors[0].email }}

          {{ categories }}            {# array #}
          {{ categories[0].term }}
          {{ categories[0].scheme }}
          {{ categories[0].label }}
      {% endfor %}
      $0
    '''
  "info: craft.fields":
    prefix: "infofields"
    body: '''
      {% set body = craft.app.fields.getFieldByHandle('body') %}
      {{ body.instructions }}
    '''
  "info: craft.globals":
    prefix: "infoglobals"
    body: '''
      {% set globals = craft.app.globals.allSets %}
      {% set globals = craft.app.globals.editableSets %}
      {% set globals = craft.app.globals.totalSets %}
      {% set globals = craft.app.globals.totalEditableSets %}
      {% set globalSet = craft.app.globals.getSetById(id, locale) %}
      {% set globalSet = craft.app.globals.getSetByHandle(handle, locale) %}
    '''
  "info: craft.sections":
    prefix: "infosections"
    body: '''
      {% set sections = craft.app.sections.allSections %}
      {% set sections = craft.app.sections.editableSections %}
      {% set total = craft.app.sections.totalSections %}
      {% set total = craft.app.sections.totalEditableSections %}
      {% set section = craft.app.sections.getSectionById(id) %}
      {% set section = craft.app.sections.getSectionByHandle(handle) %}
    '''
  "info: craft.session":
    prefix: "infosession"
    body: '''
      {% if not craft.app.user.isGuest %}{% endif %}

      {{ craft.app.user.rememberedUsername }}
      {{ craft.app.user.getReturnUrl() }}

      {{ craft.app.session.getFlash( key, defaultValue, delete ) }}
      {{ craft.app.session.getFlash( key, defaultValue, false ) }}
      {{ craft.app.session.getAllFlashes( delete ) }}
      {{ craft.app.session.getAllFlashes( false ) }}

      {% if craft.app.session.hasFlash() %}{% endif %}
    '''
  "info: craft.tags":
    prefix: "infotags"
    body: '''

      {% set tags = craft.tags.first() %}
      {% set tags = craft.tags.last() %}
      {% set tags = craft.tags.nth( n ) %}
      {% set tags = craft.tags.ids() %}
      {% set tags = craft.tags.count() %}

      {% set tags = craft.tags({
          id:             id OR 'not id' ,
          fixedOrder:     true|false,
          title:          'title',
          group:          'tagGroupHandle',
          groupId:        id,
          offset:         2,

          relatedTo:  element, sourceElement, targetElement, field, sourceLocale,

          orderBy:        'title,id,groupId,dateCreated asc,dateUpdated desc',
          limit:          10,
          locale:         'en_us',
          indexBy:        'id,title',

          search:         'salty dog'           containing both "salty" and "dog"
                          '"salty dog"'         containing the exact phrase "salty dog"
                          'salty OR dog'        containing either "salty" or "dog" (or both)
                          'salty -dog'          containing "salty" but not "dog"
                          'body:salty'          containing "salty" in the "body" field
                          'body:salty'          body:dog containing both "salty" and "dog"
                                                in the "body" field
                          'body:*'              containing anything within the "body" field
                          'salty locale:en_us'  containing "salty" in the locale "en_us"
                          'salt*'               containing a word that begins with "salt"
                          '*ty'                 containing a word that ends with "ty"
                          '*alt*'               containing a word that contains "alt"

          Supported syntaxes for childOf, kind, parentOf
                        elementId
                        AssetFileModel, EntryModel, UserModel, or TagModel
                        [ arrayOfModels, arrayOfModels, arrayOfModels ]
                        [ 1, 2, 3 ]
                        craft.assets, craft.entries, craft.users, craft.tags
      }).all %}

      {% for tag in tags %}
          {{ tag.id }}
          {{ tag.title }}
          {{ tag.group }}
          {{ tag.groupId }}
          {{ tag.locale }}

          {% set prev = tag.getPrev( params ) %}
          {% set next = tag.getNext( params ) %}
          {% if prev %} <a href="/link-to-prev-tag">{{ prev.name }}</a> {% endif %}
          {% if next %} <a href="/link-to-next-tag">{{ next.name }}</a> {% endif %}
      {% endfor %}}
      $0
    '''
  "info: craft.users":
    prefix: "infousers"
    body: '''

      {% set users = craft.users.first() %}
      {% set users = craft.users.last() %}
      {% set users = craft.users.nth( n ) %}
      {% set users = craft.users.ids() %}
      {% set users = craft.users.count() %}

      {% set users = craft.users({
        admin:        true OR false,
        can:          'createEntries:5'
        email:        'email',
        firstName:    'firstName',
        group:        'groupHandle',
        groupId:      id,
        id:           id OR 'not id',
        fixedOrder:   true|false,
        lastLoginDate: 'YYYY,YYYY-MM,YYYY-MM-DD,YYYY-MM-DD HH:MM,YYYY-MM-DD HH:MM:SS',
        lastName:     'lastName',
        offset:       1,
        status:       'active,locked,suspended,pending,archived,null',
        username:     'username,

        relatedTo:  element, sourceElement, targetElement, field, sourceLocale,

        orderBy:      'username,firstName,lastName,email,preferredLocale,status,lastLoginDate,
                      dateCreated asc,dateUpdated desc',
        limit:      number,
        indexBy:    'id,username'

        search:     'salty dog'           containing both "salty" and "dog"
                    '"salty dog"'         containing the exact phrase "salty dog"
                    'salty OR dog'        containing either "salty" or "dog" (or both)
                    'salty -dog'          containing "salty" but not "dog"
                    'body:salty'          containing "salty" in the "body" field
                    'body:salty'          body:dog containing both "salty" and "dog"
                                          in the "body" field
                    'body:*'              containing anything within the "body" field
                    'salty locale:en_us'  containing "salty" in the locale "en_us"
                    'salt*'               containing a word that begins with "salt"
                    '*ty'                 containing a word that ends with "ty"
                    '*alt*'               containing a word that contains "alt",
      }).all() %}

      {% for user in users %}
          {{ user.id }}
          {{ user.username }}
          {{ user.name }}
          {{ user.firstName }}
          {{ user.lastName }}
          {{ user.fullName }}
          {{ user.friendlyName }}    {# falls back to username #}
          {{ user.email }}

          {{ user.preferredLocale }}
          {{ user.admin }}           {# true,false #}
          {{ user.status }}          {# active, locked, suspended, pending, archived #}
          {{ user.isCurrent }}       {# is currently logged in #}

          {{ user.lastLoginDate }}
          {{ user.dateCreated }}
          {{ user.dateUpdated }}

          {{ user.getChildren( fields ) }}
          {{ user.getParents( fields ) }}

          {{ user.getGroups() }}
          {{ user.isInGroup( groupHandle OR groupId OR UserGroupModel ) }}
          {{ user.getPhotoUrl( size ) }}
          {{ user.isCurrent() }}
          {{ user.can( 'permission' ) }}

          {% set prev = user.getPrev( params ) %}
          {% set next = user.getNext( params ) %}
          {% if prev %} <a href="/link-to-prev-user">{{ prev.username }}</a> {% endif %}
          {% if next %} <a href="/link-to-next-user">{{ next.username }}</a> {% endif %}
      {% endfor %}}
      $0
    '''
